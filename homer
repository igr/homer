#!/usr/bin/env bash

set -e

command -v git >/dev/null 2>&1 || { echo "Homer requires \"git\", but it's not installed. Aborting." >&2; exit 1; }

readonly homer="git --git-dir=$HOME/.homer/ --work-tree=$HOME"
readonly VERSION=1.4.0


## colors
# check if stdout is a terminal
if test -t 1; then

    # see if it supports colors
    ncolors=$(tput colors)

    if test -n "$ncolors" && test $ncolors -ge 8; then
        bold="$(tput bold)"
        nc="$(tput sgr0)"

        gray="$(tput setaf 247)"
        red_heart="$(tput bold)$(tput setaf 15)$(tput setab 1)"
        red="$(tput setaf 9)"
        green="$(tput setaf 10)"
        blue="$(tput setaf 12)"
        yellow="$(tput setaf 11)"
        purple="$(tput setaf 13)"
    fi
fi


function title {
	echo
	echo "${bold}Homer v${VERSION}${nc}"
	echo "${gray}http://github.com/igr/homer${nc}"
	echo
}

function itsDone {
	echo
	echo "Done with ${red_heart} ‚ù§ ${nc}."
	echo
}

function isStatusClean {
	if [[ -z "`$homer status --porcelain`" ]]; then
		echo "yes"
	else
		echo "no"
	fi
}

function findNewFiles {
	$homer status --porcelain | while read status file; do
		case $status in
			A) echo "$file";;
		esac
	done
}

function findModifiedFiles {
	$homer status --porcelain | while read status file; do
		case $status in
			M) echo "$file";;
		esac
	done
}


function findDeletedFiles {
	$homer status --porcelain | while read status file; do
		case $status in
			D) echo "$file";;
		esac
	done
}


function findTrackedFolders {
	while read -r t; do
		if [[ $t != *"/"* ]]; then
    		echo $t
		fi
	done <<< `$homer ls-tree -r master --name-only -d`
}

function findUntrackedFiles {
	dirs=`findTrackedFolders`

	while read -r f; do
		for d in $dirs; do
			if [[ "$f" == "$d/"* ]]; then
				echo $f
			fi
		done
	done <<< `$homer ls-files --others -x "*/*/**" --exclude-per-directory=.gitignore`
}

function addUntrackedFiles {
	dirs=`findTrackedFolders`

	while read -r f; do
		for d in $dirs; do
			if [[ "$f" == "$d/"* ]]; then
				$homer add $f
			fi
		done
	done <<< `$homer ls-files --others -x "*/*/**" --exclude-per-directory=.gitignore`
}

function findOriginChanges {
	$homer fetch origin &> /dev/null
	readonly fetch_head=`cat $HOME/.homer/FETCH_HEAD | cut -f1`
	readonly local_head=`cat $HOME/.homer/refs/heads/master`
	if [[ "$fetch_head" != "$local_head" ]]; then
		echo "Pending updates detected!"
		echo "Run 'homer get' to update."
	fi
}


###
# Shows the status.
###
function status {
	echo
	echo "${green}New${nc}"
	findNewFiles

	echo
	echo "${yellow}Modified${nc}"
	findModifiedFiles

	echo
	echo "${red}Deleted${nc}"
	findDeletedFiles

	echo
	echo "${purple}Untracked${nc}"
	findUntrackedFiles

	echo
	echo "${blue}Origin${nc}"
	findOriginChanges

	echo
}

###
# Adds untracked files.
###
function add {
	if [[ -z "$*" ]]; then
		echo
		read -p "Do you want to add all untracked files? [y/N] " response
		 if [[ $response =~ ^(yes|y|Y) ]]; then
		 	echo "Adding all untracked files"

    		addUntrackedFiles

    		itsDone

    		exit
 		fi
		exit 1
	fi

	echo "Adding files"
	$homer add $*

	itsDone
}

###
# Commits and pushes everything.
###
function push {
	echo "Commit and push to remote"

	addUntrackedFiles

	message=$1
	if [[ -z $message ]]; then
		message="Some Homer changes!"
	fi

	$homer commit -am "$message"

	$homer push

	itsDone
}

###
# Pull new changes.
###
function pull {
	if [[ `isStatusClean` == 'no' ]]; then
		echo "Homer is not clean! First put your changes."
		echo
		exit 2
	fi

	echo "Pulling new changes"

	$homer pull

	itsDone
}

###
# Initializes everything.
###
function init {
	if [[ -z $1 ]]; then
		echo "Github repo not specified. Pass \"user/repo_name\" as an argument."
		exit 1
	fi

	read -p "Homer will install now in your home. Proceed? [y/N] " response
	if [[ $response =~ ^(yes|y|Y) ]]; then
 		echo "Homer initalization..."

		mkdir .homer
		cd .homer
		git init --bare
		git config --local status.showUntrackedFiles no

		$homer remote add origin https://github.com/$1.git
		$homer push -u origin master

		itsDone
	fi
}

###
# Clones the remote repo.
###
function clone {
	if [[ -z $1 ]]; then
		echo "Github repo not specified. Pass \"user/repo_name\" as an argument."
		exit 1
	fi

	read -p "Homer will clone in your home. Proceed? [y/N] " response
	if [[ $response =~ ^(yes|y|Y) ]]; then
 		echo "Homer cloning..."

		echo ".homer" >> .gitignore

		git clone --bare https://github.com/$1.git $HOME/.homer
		$homer config --local status.showUntrackedFiles no
		$homer checkout

		itsDone
	fi
}

###
# Removes files from the repo.
###
function remove {
	if [[ -z "$*" ]]; then
		echo "File(s) to remove not specified."
		exit 1
	fi

	echo "Removing files"
	$homer rm $*

	itsDone
}


###
# Resets all or a singe file.
###
function reset {
	if [[ -z "$*" ]]; then
		echo
		read -p "Do you want to reset all changes? [y/N] " response
		 if [[ $response =~ ^(yes|y|Y) ]]; then
		 	echo "Resetting all changes"

    		$homer reset --hard

    		itsDone

    		exit
 		fi
		exit 1
	fi

	echo "Resetting files"

	$homer checkout -- $*

	itsDone
}

###
# Check if there is a new version of Homer availiable.
# If there is, download it.
###
function update {

	command -v jq >/dev/null 2>&1 || { echo "Homer requires \"jq\", but it's not installed. Aborting." >&2; exit 1; }
	command -v curl >/dev/null 2>&1 || { echo "Homer requires \"curl\", but it's not installed. Aborting." >&2; exit 1; }

	github_url='https://api.github.com/repos/igr/homer'
	up_version=`curl -s ${github_url}/releases/latest | jq --raw-output '.tag_name'`

	if [[ $up_version != "v$VERSION" ]]; then
		echo "New version availiable: $up_version"
		echo "Downloading ~/homer_${up_version}"

		download_url=`curl -s ${github_url}/releases/latest | jq -r ".assets[] | .browser_download_url"`
		curl  -s -o homer_${up_version} $download_url
		chmod +x homer_${up_version}

		itsDone
	else
		echo "You are already using the latest version of Homer. Enjoy!"
	fi

}

################################################################################

cd $HOME

title

readonly cmd="$1"

case $cmd in
    s|st|status)
		shift
    	status
    	;;
    a|add)
		shift
		add $*
    	;;
    r|rm|remove|del|delete)
		shift
		remove $*
		;;
    p|put)
		shift
		push $*
		;;
	g|get)
		shift
		pull
		;;
	i|init)
		shift
		init $*
		;;
	reset)
		shift
		reset $*
		;;
	c|clone)
		shift
		clone $*
		;;
	u|up|update)
		update
		;;
	git)
		shift
		$homer $*
		;;
    v|ver|version)
		;;
    *)

	echo "    s|st|status            - show status";
	echo "    a|add [<FILES>]        - add (all) untracked files or a new file"
	echo "    r|rm|remove <FILES>    - remove file(e)"
	echo "    p|put [<MESSAGE>]      - commit and push all changes to remote"
	echo "    g|get                  - pull changes from remote"
	echo "    reset [<FILES>]        - reset all changes or reset just a file"
	echo "    i|init <GITHUB_REPO>   - install and connect to github (\"user/repo\")"
	echo "    c|clone <GITHUB_REPO>  - clone the repo from github (\"user/repo\")"
	echo "    v|ver|version          - display version"
	echo "    u|up|update            - download the new version to current folder"
	echo "    git <*>                - executes git commands directly (for debugging)"
	echo
    ;;
esac
